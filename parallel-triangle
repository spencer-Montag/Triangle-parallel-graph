#include <stdio.h>
#include <math.h>

// Define a structure for 3D points
struct Point {
    double x, y, z;
};

// Function to calculate the Euclidean distance between two points
double distance(struct Point p1, struct Point p2) {
    double dx = p1.x - p2.x;
    double dy = p1.y - p2.y;
    double dz = p1.z - p2.z;
    return sqrt(dx * dx + dy * dy + dz * dz);
}

int main() {
    int num_points = 100;  // Change this to the number of points in your dataset
    double r_max = 1.0;    // Change this to the maximum side length allowed for triangles

    struct Point points[num_points];  // Assuming you have an array of 3D points

    // Histogram bins for side lengths r12, r23, and r31
    int bins[100] = {0};  // Adjust the size as needed

    // Iterate through all combinations of three points
    for (int i = 0; i < num_points; i++) {
        for (int j = i + 1; j < num_points; j++) {
            for (int k = j + 1; k < num_points; k++) {
                double side_lengths[3];
                side_lengths[0] = distance(points[i], points[j]);
                side_lengths[1] = distance(points[j], points[k]);
                side_lengths[2] = distance(points[k], points[i]);

                // Check if all side lengths are less than r_max
                if (side_lengths[0] < r_max && side_lengths[1] < r_max && side_lengths[2] < r_max) {
                    // Increment the histogram bins based on side lengths
                    for (int bin = 0; bin < 3; bin++) {
                        if (side_lengths[bin] < r_max) {
                            bins[(int)(side_lengths[bin] * 100)]++;
                        }
                    }
                }
            }
        }
    }

    // Print or use the histogram data as needed
    for (int i = 0; i < 100; i++) {
        printf("Bin %d: %d\n", i, bins[i]);
    }

    return 0;
}
